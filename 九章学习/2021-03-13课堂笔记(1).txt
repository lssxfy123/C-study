1.为什么要用JSoN
规则繁简不一样
meta data 不一样
o(1) search


JSON 灵活

为什么不用text格式？
JSON 通用的约定

本质就是text
{ key:value}


2.复用性  
可重用性

系统设计 非常重要的思想

同样的功能，多次 可重复
开发的量，数据的存储量



3.
分批次发
pub sub?
Message queue


4.异步化处理
把原来同步的调用，改成异步的调用，下游系统根据自己的能力去处理请求
MQ
必须要掌握


5.如果MQ里有一千万个请求，想问一下如何优化dequeueAsyce的process

RocketMQ  kafak 

保证消息不丢失的
10000万



MQ-》存到磁盘上

MQ消息挤压能力，很强

1，2K
分布式的MQ 很多机器


消息消费者，按自己能力消费



6.
领券前去用户券表查一下
每个消息中都携带剩余券的数量
给batch表加锁，余量小于0了就fail掉那个Request
Redis?


7.模板题
模板系统，中的知识点，去往上“套”

8.不能只盯着面试官说的功能，要把可能出现问题的“异常”也要考虑到，也要分析出来 （加分项，出彩的地方）

10个，每个人的题我出一样的题，“比较”


8.请问如果我们在request的时候已经用事务查询了是不是还有剩余的优惠卷，为什么会存在超发的情况？我可以理解mq可以缓解数据库压力，但没太理解mq怎么帮助解决超发

request ——》Redis Lua（校验，是否超发） -》放行 （一瞬间流量非常大，10万券，1S抢完）-》MQ（异步）——》发券接口（（领券接口吧）
）（根据自己能力去发券）——》MySql(SQL 再去判断一下)

9.可以讲一讲那个分布式事务嘛


10。选a的话，用户可能在多个web同时下提交订单

确认订单页校验

创建订单还要最终校验


11.TCC

Try   冻结
Confirm 核销
Cancel  解冻

12.什么叫做延迟消息， 刚才没有听到

普通的消息，发了后，消费者立马就能去消费
延迟消息，可以发了消费后，过一段时间用户才能去消费

1小时，后消费者才能去消费

15分钟，支付时间 是否已经支付 检查
创建订单的时候，发一个延迟消息 延迟15分钟消费，支付状态检查


13.关于互斥，是在规则数据库当中就要指明跟谁互斥吗？我看前面schema只有一个’ is_mutext:true/false’，怎么知道这个券跟哪个券互斥呢？
规则可以很复杂
可以指定和那些类型的券互斥
定制这个规则

14.所以改为冻结，就是为了准确cancel？
订单1： 券1 ，创建订单，但是没付款 | 有冻结
订单2： 也可以去选择，券1         | 看不到券1，直到券1 解冻后才能看到 


15.课件中是以支付和优惠卷为例解释的TCC, 老师能解释一下如果我们有第三个服务（e.g. 订单）的tcc大概是怎么运作嘛？


订单是一个业务组织系统，由他发起对 支付，优惠券系统的调用


16.请问订单ID就是transaction ID么？
不是的

17.请问规则里面如果有 “或” “与”等不同条件的组合/嵌套的时候怎么办？是定义一些关键字 “or” “and”来构建复杂规则吗？

规则引擎（中间件），规则表示式

18.这个TCC和Lua script是类似吗？感觉都是解决check and set，把两步变成atomic access.
不一样，TCC 多个系统间的
Lua 多个命令，需要原子操作




19.不太懂为啥需要TCC,为啥不能再创建订单的时候，需要”冻结“，而不是直接“已使用”呢
 
中间状态，冻结可以理解为锁定


20.请问老师，对于延迟消息，多久扫描一次呢？
MQ中字节内部的规则

21.”15分钟后才能消费“是指在15分钟后消息才对消费者可见吗？不需要消费者端额外有延迟消费的逻辑吧？

消费者端不需要额外有延迟消费的逻辑
15分钟后消息才对消费者可


22.发券、领券这里需要用事务，如果用NoSql的数据库是不是就不能很好的完成这些行为
最终都是要以数据库为准的，NoSQL可靠性没有MYSQL强，最后都以数据库为准

23.秒杀领卷也是设定redis 是实际数量的1.5倍吗？还是不用
不要1.5倍那么多，多一点就行了

24.关于TCC，
为什么不可以把锁定和已使用合并成一个呢

不可以的


25.请问我是根据订单ID来cancel么？订单是不是在backend自动cancel的
可以用订单ID，也可以有一个其他的ID（业务ID）

26.那如果我支付成功了话，就ignore订单cancel?
支付成功就什么都不干了，不会去cancel



27.前端限流和后端限流是分别用什么实现的？

限流器，前端

后端，限流框架Sentinel


28.关于券数据库的索引，刚才提到了 coupon_id, batch_id, user_id, 似乎expire_time，rule_id等也很重要，这些也需要创建索引（似乎只要用到的字段都需要了）。能不能展开说明一下需要索引的字段的判断标准？

如何判断是否需要创建索引
（1）是否频繁查询，查询的量特别大
比较小的话，适合
（2）区分度大不大

 性别：男 女 ，不需要索引

29.如何通知用户订单已关闭， 通过触达系统么？
可以


30.老师刚才讲到了 Redis/MQ都是解决了把同步问题弄成异步；那到底是哪个步骤解决超发问题？是通过在Redis和MySql同时检查余量吗？

还是说通过异步化操作实际上降低了超发的可能性了（因为不存在多个人同时操作的问题了）


Redis/MQ都是解决了把同步问题弄成异步，错误的
MQ变成异步

Redis和MySql同时检查余量，都做了，
Redis先检查，扛流量的
异步化，是去降低了 系统的压力



31.产生订单之后，我的理解是同时会产生两个消息，一个消息发送给支付服务，一个延迟消息发送给另外一个支付超时检查。在实际电商中，这两个消息发给同一个服务吗？在实际电商系统中，这样的消息是发送给同一个微服务来处理，还是要设置不同的微服务？
 
产生订单之后   1.发一个延迟消息，检查支付状态 ——》 15分钟后，检查状态 （检查状态服务） （1）付款，啥事不干 （2）把订单关闭

             2.点击付款-》支付（支付服务）（唤醒收银台，支付宝，微信）-》 支付成功——》订单状态改为已支付

32.索引需要unique的，那么索引除了频繁查询，应该需要是PK或者FK吧？
   PK，FK，和索引不是一个概念
   主键索引都是唯一索引
   唯一索引不一定是主键索引
   

